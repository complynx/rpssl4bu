// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/complynx/rpssl4bu/backend/pkg/types"
)

// Game is an autogenerated mock type for the Game type
type Game struct {
	mock.Mock
}

type Game_Expecter struct {
	mock *mock.Mock
}

func (_m *Game) EXPECT() *Game_Expecter {
	return &Game_Expecter{mock: &_m.Mock}
}

// Choice provides a mock function with given fields: _a0
func (_m *Game) Choice(_a0 context.Context) (types.Choice, error) {
	ret := _m.Called(_a0)

	var r0 types.Choice
	if rf, ok := ret.Get(0).(func(context.Context) types.Choice); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.Choice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Game_Choice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Choice'
type Game_Choice_Call struct {
	*mock.Call
}

// Choice is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Game_Expecter) Choice(_a0 interface{}) *Game_Choice_Call {
	return &Game_Choice_Call{Call: _e.mock.On("Choice", _a0)}
}

func (_c *Game_Choice_Call) Run(run func(_a0 context.Context)) *Game_Choice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Game_Choice_Call) Return(_a0 types.Choice, _a1 error) *Game_Choice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Choices provides a mock function with given fields: _a0
func (_m *Game) Choices(_a0 context.Context) ([]types.Choice, error) {
	ret := _m.Called(_a0)

	var r0 []types.Choice
	if rf, ok := ret.Get(0).(func(context.Context) []types.Choice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Choice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Game_Choices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Choices'
type Game_Choices_Call struct {
	*mock.Call
}

// Choices is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Game_Expecter) Choices(_a0 interface{}) *Game_Choices_Call {
	return &Game_Choices_Call{Call: _e.mock.On("Choices", _a0)}
}

func (_c *Game_Choices_Call) Run(run func(_a0 context.Context)) *Game_Choices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Game_Choices_Call) Return(_a0 []types.Choice, _a1 error) *Game_Choices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Play provides a mock function with given fields: _a0, _a1
func (_m *Game) Play(_a0 context.Context, _a1 types.Choice) (types.Result, types.Choice, error) {
	ret := _m.Called(_a0, _a1)

	var r0 types.Result
	if rf, ok := ret.Get(0).(func(context.Context, types.Choice) types.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(types.Result)
	}

	var r1 types.Choice
	if rf, ok := ret.Get(1).(func(context.Context, types.Choice) types.Choice); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(types.Choice)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, types.Choice) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Game_Play_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Play'
type Game_Play_Call struct {
	*mock.Call
}

// Play is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.Choice
func (_e *Game_Expecter) Play(_a0 interface{}, _a1 interface{}) *Game_Play_Call {
	return &Game_Play_Call{Call: _e.mock.On("Play", _a0, _a1)}
}

func (_c *Game_Play_Call) Run(run func(_a0 context.Context, _a1 types.Choice)) *Game_Play_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Choice))
	})
	return _c
}

func (_c *Game_Play_Call) Return(_a0 types.Result, _a1 types.Choice, _a2 error) *Game_Play_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewGame interface {
	mock.TestingT
	Cleanup(func())
}

// NewGame creates a new instance of Game. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGame(t mockConstructorTestingTNewGame) *Game {
	mock := &Game{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
