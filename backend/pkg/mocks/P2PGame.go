// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/complynx/rpssl4bu/backend/pkg/types"
)

// P2PGame is an autogenerated mock type for the P2PGame type
type P2PGame struct {
	mock.Mock
}

type P2PGame_Expecter struct {
	mock *mock.Mock
}

func (_m *P2PGame) EXPECT() *P2PGame_Expecter {
	return &P2PGame_Expecter{mock: &_m.Mock}
}

// AddPlayer provides a mock function with given fields: name
func (_m *P2PGame) AddPlayer(name string) (bool, chan types.Message, error) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 chan types.Message
	if rf, ok := ret.Get(1).(func(string) chan types.Message); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan types.Message)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// P2PGame_AddPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayer'
type P2PGame_AddPlayer_Call struct {
	*mock.Call
}

// AddPlayer is a helper method to define mock.On call
//   - name string
func (_e *P2PGame_Expecter) AddPlayer(name interface{}) *P2PGame_AddPlayer_Call {
	return &P2PGame_AddPlayer_Call{Call: _e.mock.On("AddPlayer", name)}
}

func (_c *P2PGame_AddPlayer_Call) Run(run func(name string)) *P2PGame_AddPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *P2PGame_AddPlayer_Call) Return(_a0 bool, _a1 chan types.Message, _a2 error) *P2PGame_AddPlayer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// Choice provides a mock function with given fields: choice, rightSide
func (_m *P2PGame) Choice(choice types.Choice, rightSide bool) {
	_m.Called(choice, rightSide)
}

// P2PGame_Choice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Choice'
type P2PGame_Choice_Call struct {
	*mock.Call
}

// Choice is a helper method to define mock.On call
//   - choice types.Choice
//   - rightSide bool
func (_e *P2PGame_Expecter) Choice(choice interface{}, rightSide interface{}) *P2PGame_Choice_Call {
	return &P2PGame_Choice_Call{Call: _e.mock.On("Choice", choice, rightSide)}
}

func (_c *P2PGame_Choice_Call) Run(run func(choice types.Choice, rightSide bool)) *P2PGame_Choice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Choice), args[1].(bool))
	})
	return _c
}

func (_c *P2PGame_Choice_Call) Return() *P2PGame_Choice_Call {
	_c.Call.Return()
	return _c
}

// GetID provides a mock function with given fields:
func (_m *P2PGame) GetID() types.GameID {
	ret := _m.Called()

	var r0 types.GameID
	if rf, ok := ret.Get(0).(func() types.GameID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.GameID)
	}

	return r0
}

// P2PGame_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type P2PGame_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *P2PGame_Expecter) GetID() *P2PGame_GetID_Call {
	return &P2PGame_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *P2PGame_GetID_Call) Run(run func()) *P2PGame_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *P2PGame_GetID_Call) Return(_a0 types.GameID) *P2PGame_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsFull provides a mock function with given fields: ctx
func (_m *P2PGame) IsFull(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// P2PGame_IsFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFull'
type P2PGame_IsFull_Call struct {
	*mock.Call
}

// IsFull is a helper method to define mock.On call
//   - ctx context.Context
func (_e *P2PGame_Expecter) IsFull(ctx interface{}) *P2PGame_IsFull_Call {
	return &P2PGame_IsFull_Call{Call: _e.mock.On("IsFull", ctx)}
}

func (_c *P2PGame_IsFull_Call) Run(run func(ctx context.Context)) *P2PGame_IsFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *P2PGame_IsFull_Call) Return(_a0 bool) *P2PGame_IsFull_Call {
	_c.Call.Return(_a0)
	return _c
}

// RemovePlayer provides a mock function with given fields: rightSide
func (_m *P2PGame) RemovePlayer(rightSide bool) {
	_m.Called(rightSide)
}

// P2PGame_RemovePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePlayer'
type P2PGame_RemovePlayer_Call struct {
	*mock.Call
}

// RemovePlayer is a helper method to define mock.On call
//   - rightSide bool
func (_e *P2PGame_Expecter) RemovePlayer(rightSide interface{}) *P2PGame_RemovePlayer_Call {
	return &P2PGame_RemovePlayer_Call{Call: _e.mock.On("RemovePlayer", rightSide)}
}

func (_c *P2PGame_RemovePlayer_Call) Run(run func(rightSide bool)) *P2PGame_RemovePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *P2PGame_RemovePlayer_Call) Return() *P2PGame_RemovePlayer_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewP2PGame interface {
	mock.TestingT
	Cleanup(func())
}

// NewP2PGame creates a new instance of P2PGame. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewP2PGame(t mockConstructorTestingTNewP2PGame) *P2PGame {
	mock := &P2PGame{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
